//---------------------------------------------------------------------------//
//bb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nu//
//                                                                           //
//                                                                           //
//                         MaGe Simulation                                   //
//                                                                           //
//      This code implementation is the intellectual property of the         //
//      MAJORANA and Gerda Collaborations. It is based on Geant4, an         //
//      intellectual property of the RD44 GEANT4 collaboration.              //
//                                                                           //
//                        *********************                              //
//                                                                           //
//    Neither the authors of this software system, nor their employing       //
//    institutes, nor the agencies providing financial support for this      //
//    work  make  any representation or  warranty, express or implied,       //
//    regarding this software system or assume any liability for its use.    //
//    By copying, distributing or modifying the Program (or any work based   //
//    on on the Program) you indicate your acceptance of this statement,     //
//    and all its terms.                                                     //
//                                                                           //
//bb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nubb0nu//
//---------------------------------------------------------------------------//
/**                                                            
 * $Id: MGGeneratorWangNeutrons.hh,v 1.5 2007-02-23 09:24:09 mgmarino Exp $
 *      
 * CLASS DECLARATION:  MGGeneratorWangNeutrons.hh
 *
 *---------------------------------------------------------------------------//
 *
 * DESCRIPTION: 
 *
 */ 
// Begin description of class here
/**
 *
 * Generate Beam of Neutrons as would be generated by high
 * energy muons in an underground facility.
 * Currently the beam is simulated with an equation by Wnag, et. al.
 * Particles are then generated parallel to 
 * the z-axis.
 *
 * MGGeneratorTUNLFEL.* is being used as an example.
 *
 */
// End class description
//
/**  
 * SPECIAL NOTES:
 *
 */
// 
// --------------------------------------------------------------------------//
/** 
 * AUTHOR: K.Hudek
 * CONTACT: 
 * FIRST SUBMISSION: Thu Jun 16 09:29:25 PDT 2005
 * 
 * REVISION:
 * 
 * 10-24-2005, Various optimizations. R. Henning
 * 10-17-2005, Added fMinNeutronEnergy, R. Henning.
 */
// --------------------------------------------------------------------------//

#ifndef _MGGENERATORWANGNEUTRONS_HH
#define _MGGENERATORWANGNEUTRONS_HH

//---------------------------------------------------------------------------//

#include "globals.hh"
#include "G4ThreeVector.hh"

#include "TFile.h"  //root include files for testing
#include "TH1F.h"
#include "TH2F.h"
#include "TH3F.h"

#include "generators/MGVGenerator.hh"

//---------------------------------------------------------------------------//

class G4Event;
class G4Messenger;
class G4ParticleGun;
class G4Run;
class G4Timer;

//---------------------------------------------------------------------------//

class MGGeneratorWangNeutrons : public MGVGenerator
{
public:

  MGGeneratorWangNeutrons();
  MGGeneratorWangNeutrons(const MGGeneratorWangNeutrons &);
 ~MGGeneratorWangNeutrons();

  //public interface

  void BeginOfEventAction(G4Event *event);
  void BeginOfRunAction(G4Run const *run);
  void Dump();
  void EndOfRunAction(G4Run const *run);
  void GeneratePrimaryVertex(G4Event *event);
  void SetDefaults();

  G4double GetCurrentEnergy() { return fCurrentEnergy; }
  G4double GetMuonEnergy() { return fMuonDepthEnergy; }
  G4double GetMuonSurfaceEnergy() { return fMuonSurfaceEnergy; }
  G4double GetMaxMuonEnergy() { return fMaxMuonEnergy; }
  G4double GetMinMuonEnergy() { return fMinMuonEnergy; }
  G4ThreeVector GetMuonDirection() { return fMuonDirection; }
  G4ThreeVector GetCurrentPosition() { return fCurrentPosition; }
  G4ThreeVector GetDirection() { return fDirection; }

  //This method is not used but it is necessary 
  //because it is purely virtual in MGVGenerator
  void SetParticlePosition(G4ThreeVector) {;}

  //User commanded inputs
  void SetOrigin(G4ThreeVector origin) { fOrigin = origin; }
  void SetMaxMuonEnergy(G4double maxmuonenergy){fMaxMuonEnergy= maxmuonenergy;}
  void SetMinMuonEnergy(G4double minmuonenergy){fMinMuonEnergy= minmuonenergy;}
  void SetMinNeutronEnergy(G4double minE){fMinNeutronEnergy = minE;}
  void SetNeutronEnergyCutoff(G4double ecut){fNeutronEnergyCutoffMax = ecut;}
  void SetSamplePoints(G4int samplepoints) {fP = samplepoints; };
  void SetDepth(G4double depth) {fDepth = depth; };
  void SetCaveX(G4double caveX) {fCaveX = caveX; };
  void SetCaveY(G4double caveY) {fCaveY = caveY; };
  void SetHistoFile(G4String histofile) {fHistoFile = histofile; };

//---------------------------------------------------------------------------//
//Cosmic muon distribution sampler functions
//Physical Letters B
//Volume 592, Issues 1-4, July 2004
//Article 24, pp. 228-234

//Calculateds minimum muon energy to make it to fDepth
  inline  void CalculateMinMuonSurfaceEnergy();
//sets fMuonEnergy and fMuonDirection to the distribution in said equation
  void SampleCosmicMuonDirectionAndEnergy();
  inline G4double GetCosmicMuonFlux(G4double muonEnergy, G4double cosAngle);
  inline G4double GetCosmicMuonDepthAttenuation(G4double depth, G4double surfaceMuonEnergy);

//---------------------------------------------------------------------------//
//---------------------------------------------------------------------------//
//Wang neutron distribution sampler functions
//Physical Review D, Volume 64, 013012
//Predicting neutron production from cosmic-ray muons
//Wang et al.

  //sets fCurrentEnergy to a Wang energy distribution
  void SampleWangNeutronEnergy();
  inline void InitializeLinearPiecewiseTransformation();
  inline void SetLinearPiecewiseTransformationVars();
  inline void CloseLinearPiecewiseTransformation();
  inline G4double GetWangNeutronEnergyFlux(G4double neutronEnergy, G4double muonEnergy); //returns Wang neutron flux at specified energies
  //sets fDirection to a Wang angular distribution
  inline void CalculateNeutronEnergyCutoff(G4double muonEnergy);//sets fNeutronEnergyCutoff
  void SampleWangNeutronDirection();
  inline G4double GetWangNeutronAngularFlux(G4double muonEnergy, G4double cosAngle); //returns Wang neutron flux at specified energy and angle
  //sets fMultiplicity to a Wang multiplicity distribution
  void SampleWangNeutronMultiplicity();
  inline G4double GetWangNeutronMultiplicityFlux(G4double muonEnergy, G4double cosAngl); //returns Wang neutron multiplicity at specified energy and angle

//---------------------------------------------------------------------------//
//"Sanity check" root files containing histograms containing the generated
//spectra

  inline void InitializeRootFile();//opens root file and defines histograms
  inline void  InitializeSpectra();
  inline void  InitializeSampleCount();
  inline void  InitializeSampleRate();
  inline void FillRootFile();//fills histograms for each event
  inline void  FillSpectra();
  inline void  FillSampleCount();
  inline void  FillSampleRate();
  inline void WriteRootFile();//writes histograms for each event
  inline void CloseRootFile();//deletes memory from the heap
  inline void  CloseSpectra();
  inline void  CloseSampleCount();
  inline void  CloseSampleRate();

// --------------------------------------------------------------------------//

  //protected members
protected:

// --------------------------------------------------------------------------//

  //private  members
private:

  G4ParticleGun      *fParticleGun;

  G4double           fMuonDepthEnergy;  // Energy of attenuated muon
  G4double           fMuonSurfaceEnergy;  // Energy of incident muon
  G4double           fCurrentEnergy;  // Energy of current particle.
  G4double           fMultiplicity; //Neutron multiplicity
  G4double           fDepth; //User defined depth of detector in m.w.e.
  G4double           fMuonDepth; //Depth muon sees due to angle.
  G4double           fMaxMuonEnergy; //User defined cutoff
  G4double           fMinMuonEnergy; //User defined cutoff
  G4double           fMaxMuonDepthEnergy;
  G4double           fNeutronEnergyCutoffMax; //User defined cutoff, has strong
                                              //influence on calculation time.
  G4double           fMinNeutronEnergy;
  G4double           fNeutronEnergyCutoff;

  G4bool             fInitializeRootFileBool;
  G4bool             fMinMuonEnergyBool;
  G4bool             fInitializeLinearPiecewiseTransformationBool;
  G4double           fCaveX; //User defined x dimention of cave
  G4double           fCaveY; //User defined y dimention of cave
  G4ThreeVector      fMuonDirection;//Incident muon direction
  G4ThreeVector      fCurrentPosition; // Current position of particle 
                                       // generated.
  G4ThreeVector      fDirection;      // Direction of neutron    
  G4ThreeVector      fOrigin;      // Neutron origin. Particles will be 
                                   // generated from this point.
  G4int              fEventNumber; //local event number
  G4int              fErrorNumber; //local event number

  //Linear piecewise transformation variables
  G4int      fS; //Current section sampled from
  G4int      fP; //Number of points sampled from neutron energy
  G4double   fD; //Constant = -(1/2*m*a^2 + c*a + x')
  G4double   fTA; //Total area
  G4double*  fX; //Neutron energy sample points
  G4double*  fY; //Correlated fluxes to fX
  G4double*  fM; //Slope of section
  G4double*  fC; //Intercept of section
  G4double*  fA; //Area of section
  G4double** fAL; //Area lookup table
  G4int      fAN; //Number of bins in AL
  G4double*  fN; //Normalization of section

  //Histogram declarations
  TFile*    hFile;
  G4String  fHistoFile;

  //Spectra
  G4double  fMuonCosPhi;
  G4double  fWangCosPhi;
  G4double  fCurrentNflux;

  TH1F*     hWangEnergy;
  TH2F*     hWangEnergyWang;
  TH1F*     hWangCosPhi;
  TH1F*     hWangMultiplicity;
  TH1F*     hMuonSurfaceEnergy;
  TH1F*     hMuonDepthEnergy;
  TH1F*     hMuonCosPhi;
  TH2F*     hMuonEnergyAndNeutronEnergy;
  TH2F*     hMuonEnergyAndCosAngle;

  //Counters
  G4int     fWangCosPhiCount;
  G4int     fWangEnergyCount;
  G4int     fWangMultiplicityCount; 
  G4int     fMuonSurfaceEnergyAndAngleCount;
  //G4int     fMuonCosThetaCount;

  TH1I*     hTotalCount;
  TH1I*     hWangEnergyCount;
  TH1I*     hWangCosPhiCount;
  TH1I*     hWangMultiplicityCount;
  TH1I*     hMuonSurfaceEnergyAndAngleCount;
  //TH1I*     hMuonCosThetaCount;

  //Timers
  G4Timer*  fTotalTimer; //Times one run of GeneratePrimaryVertex
  G4Timer*  fTimer; //Times individual member functions

  G4double  fWangCosPhiRate;
  G4double  fWangEnergyRate;
  G4double  fWangMultiplicityRate;
  G4double  fMuonSurfaceEnergyAndAngleRate;
  G4double  fTotalRate;

  TH1F*     hTotalRate;
  TH1F*     hWangEnergyRate;
  TH1F*     hWangCosPhiRate;
  TH1F*     hWangMultiplicityRate;
  TH1F*     hMuonSurfaceEnergyAndAngleRate;
};
#endif
